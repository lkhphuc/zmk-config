/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

&mt { require-prior-idle-ms = <125>; };

/ {
    combos {
        compatible = "zmk,combos";

        bsp {
            bindings = <&kp BACKSPACE>;
            key-positions = <21 22>;
            require-prior-idle-ms = <125>;
        };

        colon {
            bindings = <&kp COLON>;
            key-positions = <9 10>;
            require-prior-idle-ms = <125>;
        };

        semi {
            bindings = <&kp SEMI>;
            key-positions = <34 33>;
            require-prior-idle-ms = <125>;
        };

        bracket1 {
            bindings = <&kp LEFT_BRACKET>;
            key-positions = <19 20>;
            require-prior-idle-ms = <125>;
        };

        bracket2 {
            bindings = <&kp RIGHT_BRACKET>;
            key-positions = <21 20>;
            require-prior-idle-ms = <125>;
        };

        paren1 {
            bindings = <&kp LPAR>;
            key-positions = <7 8>;
            require-prior-idle-ms = <125>;
        };

        paren2 {
            bindings = <&kp RPAR>;
            key-positions = <8 9>;
            require-prior-idle-ms = <125>;
        };

        brace1 {
            bindings = <&kp LBRC>;
            key-positions = <31 32>;
            require-prior-idle-ms = <125>;
        };

        brace2 {
            bindings = <&kp RBRC>;
            key-positions = <33 32>;
            require-prior-idle-ms = <125>;
        };

        and {
            bindings = <&kp AMPERSAND>;
            key-positions = <7 10>;
            require-prior-idle-ms = <125>;
        };

        or {
            bindings = <&kp PIPE>;
            key-positions = <22 19>;
            require-prior-idle-ms = <125>;
        };

        mult {
            bindings = <&kp ASTRK>;
            key-positions = <31 34>;
            require-prior-idle-ms = <125>;
        };

        plus {
            bindings = <&kp PLUS>;
            key-positions = <7 9>;
            require-prior-idle-ms = <125>;
        };

        minus {
            bindings = <&kp MINUS>;
            key-positions = <21 19>;
            require-prior-idle-ms = <125>;
        };

        underscore {
            bindings = <&kp UNDER>;
            key-positions = <31 33>;
            require-prior-idle-ms = <125>;
        };

        dollar {
            bindings = <&kp DOLLAR>;
            key-positions = <4 2>;
            require-prior-idle-ms = <125>;
        };

        percent {
            bindings = <&kp PERCENT>;
            key-positions = <16 14>;
            require-prior-idle-ms = <125>;
        };

        caret {
            bindings = <&kp CARET>;
            key-positions = <28 26>;
            require-prior-idle-ms = <125>;
        };

        pound {
            bindings = <&kp POUND>;
            key-positions = <3 4>;
            require-prior-idle-ms = <125>;
        };

        equal {
            bindings = <&kp EQUAL>;
            key-positions = <16 15>;
            require-prior-idle-ms = <125>;
        };

        bslash {
            bindings = <&kp BACKSLASH>;
            key-positions = <27 28>;
            require-prior-idle-ms = <125>;
        };

        at {
            bindings = <&kp AT>;
            key-positions = <2 3>;
            require-prior-idle-ms = <125>;
        };

        tab {
            bindings = <&kp TAB>;
            key-positions = <14 15>;
            require-prior-idle-ms = <125>;
        };

        tilde {
            bindings = <&kp TILDE>;
            key-positions = <26 27>;
            require-prior-idle-ms = <125>;
        };

        exclamation {
            bindings = <&kp EXCL>;
            key-positions = <1 2>;
            require-prior-idle-ms = <125>;
        };

        del {
            bindings = <&kp DEL>;
            key-positions = <13 14>;
            require-prior-idle-ms = <125>;
        };

        btick {
            bindings = <&kp GRAVE>;
            key-positions = <26 25>;
            require-prior-idle-ms = <125>;
        };

        capslock {
            bindings = <&kp CAPS>;
            key-positions = <36 41>;
            require-prior-idle-ms = <125>;
        };

        capsword {
            bindings = <&caps_word>;
            key-positions = <25 34>;
        };

        alternate-layout {
            bindings = <&tog 1>;
            key-positions = <27 28 31 32>;
        };
    };

    behaviors {
        mt_sk: mt_sk {
            compatible = "zmk,behavior-hold-tap";
            label = "MT_SK";
            bindings = <&kp>, <&sk>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
        };

        hml: hml {
            compatible = "zmk,behavior-hold-tap";
            label = "HML";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <150>;
            flavor = "balanced";
            hold-trigger-on-release;
            hold-trigger-key-positions = <36 37 38 39 40 41 6 7 8 9 10 11 18 19 20 21 22 23 30 31 32 33 34 35>;
        };

        hmr: hmr {
            compatible = "zmk,behavior-hold-tap";
            label = "HMR";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <150>;
            flavor = "balanced";
            hold-trigger-on-release;
            hold-trigger-key-positions = <36 37 38 39 40 41 0 1 2 3 4 5 12 13 14 15 16 17 26 27 28 29 24 25 26>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        colemak-dh {
            bindings = <
&kp TAB    &kp Q         &kp W            &kp F              &kp P              &kp B                  &kp J        &kp L                       &kp U                &kp Y             &kp SQT          &kp BSLH
&kp ESC    &hml LCTRL A  &hml LEFT_ALT R  &hml LEFT_GUI S    &hml LEFT_SHIFT T  &kp G                  &kp M        &hmr RIGHT_SHIFT N          &hmr RIGHT_GUI E     &hmr RIGHT_ALT I  &hmr RCTRL O     &kp SEMI
&kp LSHFT  &hml LSHFT Z  &kp X            &kp C              &kp D              &kp V                  &kp K        &kp H                       &kp COMMA            &kp DOT           &hmr RSHFT FSLH  &kp CAPS
                                          &mt_sk LALT LSHFT  &mt LCTRL TAB      &mt LEFT_GUI ESCAPE    &lt 2 SPACE  &mt RS(RA(RC(RCMD))) ENTER  &lt 3 LA(BACKSPACE)
            >;
        };

        qwerty_layer {
            bindings = <
&kp TAB     &kp Q         &kp W            &kp E            &kp R              &kp T     &kp Y   &kp U               &kp I             &kp O             &kp P                 &kp BSLH
&kp ESC     &hml LCTRL A  &hml LEFT_ALT S  &hml LEFT_GUI D  &hml LEFT_SHIFT F  &kp G     &kp H   &hmr RIGHT_SHIFT J  &hmr RIGHT_GUI K  &hmr RIGHT_ALT L  &hmr RCTRL SEMICOLON  &kp SEMI
&kp LSHIFT  &mt LSHFT Z   &kp X            &kp C            &kp V              &kp B     &kp N   &kp M               &kp COMMA         &kp DOT           &mt RSHFT FSLH        &kp CAPS
                                           &trans           &trans             &trans    &trans  &trans              &trans
            >;
        };

        num_nav {
            bindings = <
&trans  &kp PLUS    &kp NUMBER_7  &kp NUMBER_8       &kp NUMBER_9        &kp MINUS            &kp END    &kp PG_DN  &kp PG_UP  &kp HOME   &kp BACKSLASH  &trans
&trans  &kp PERIOD  &kp NUMBER_4  &kp NUMBER_5       &kp NUMBER_6        &kp COMMA            &kp LEFT   &kp DOWN   &kp UP     &kp RIGHT  &kp SEMI       &trans
&trans  &kp ASTRK   &kp NUMBER_1  &kp NUMBER_2       &kp NUMBER_3        &kp SLASH            &kp MINUS  &kp EQUAL  &kp LBKT   &kp RBKT   &kp RSHFT      &trans
                                  &mt LALT NUMBER_0  &mt LCTRL NUMBER_0  &mt LGUI NUMBER_0    &trans     &trans     &trans
            >;
        };

        Functions {
            bindings = <
&trans  &kp F12  &kp F7  &kp F8  &kp F9  &kp F15    &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4  &trans
&trans  &kp F11  &kp F4  &kp F5  &kp F6  &kp F14    &kp INS       &kp K_UNDO    &kp K_REDO    &kp K_COPY    &kp K_PASTE   &trans
&trans  &kp F10  &kp F1  &kp F2  &kp F3  &kp F13    &bt BT_CLR    &bt BT_NXT    &bt BT_PRV    &trans        &trans        &trans
                         &trans  &trans  &trans     &trans        &trans        &trans
            >;
        };
    };
};
